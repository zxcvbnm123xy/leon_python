一、selenium介绍
一个自动化测试工具。
在爬虫中能做什么？
官网的说法：
Selenium automates browsers. That's it! What you do with that power is entirely up to you.
浏览器的自动化操作，你想干嘛就干嘛.....就这么简单！

开源易用，支持多种语言
支持大部分主流的浏览器：firefox，chrome，ie，edge，safari，opera，phantomjs等等

官方文档：https://www.seleniumhq.org/docs

二、selenium使用
selenium包括了很多方面，如Selenium IDE 、Selenium Remote Control 、
Selenium Grid 、Selenium WebDriver
爬虫系统主要使用到Selenium WebDriver，可以在本地或远程计算机上驱动浏览器

三、具体使用
3.1
# 基础用法
# 浏览器的位置，相对路径，使用绝对路径也是可以的
phantomjs_driver_path = 'browser/phantomjs.exe'

from selenium import webdriver

# 启动驱动，不同的浏览器启用不同的类
driver = webdriver.PhantomJS(phantomjs_driver_path)
# driver = webdriver.Chrome(phantomjs_driver_path)

# 设置窗口大小
driver.set_window_size(1366, 768)
# 页面的加载超时时间
driver.set_page_load_timeout(10)
# script脚本的超时时间
driver.set_script_timeout(10)

# 访问目标页面
driver.get('https://www.baidu.com')

# 下面有3种延时方式的展示，一般实际项目中不会同一个地方用3个延时，选择一个或多个使用

# 绝对延时，等待规定时间后，直接执行后面的代码
time.sleep(1)

# 隐性延时，最长是30秒，如果30秒内，资源全部加载完成，那么执行后续的代码，
# 30秒内没有加载完成，也会继续执行后续代码
driver.implicitly_wait(30)

# 显性等待，等待时长20秒，间隔0.5秒去查询一次，目标元素是否加载完成
# 20秒内加载完成后，执行后续的代码，最长等待20秒，没有加载也会继续执行
# from selenium.webdriver.support.wait import WebDriverWait
# from selenium.webdriver.support import expected_conditions as EC
# driver.get('https://huilansame.github.io')
# locator = (By.LINK_TEXT, 'CSDN')
# # 20 秒是最长等待时间，  0.5 秒是间隔轮询时间
# WebDriverWait(driver, 20, 0.5).until(EC.presence_of_element_located(locator))

# 通过xpath的方式查找
su = driver.find_element_by_xpath('//*[@id="su"]')

# print(su.get_attribute('type'))
# print(su.get_attribute('id'))
# print(su.get_attribute('value'))
# print(su.get_attribute('class'))

# # 通过标签的id查找
# su = driver.find_element_by_id('su')
# # 通过标签的css选择器查找
# su = driver.find_element_by_css_selector('#su')
# # 通过class进行查找
# driver.find_element_by_class_name('bg s_btn')

# 也是通过标签的xpath，等同于 driver.find_element_by_xpath('//*[@id="su"]')
# driver.find_element(By.XPATH, '//*[@id="su"]')

# print(driver.title)
# print(su.get_attribute('value'))

# 保存屏幕
driver.get_screenshot_as_file('screenshot.jpg')

# 需要手动退出driver
# 切记切记一定退出
driver.quit()

3.2
# sina移动端 ，火狐
from selenium import webdriver
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
import time

# 无界面打开浏览器
# fireFoxOptions = webdriver.FirefoxOptions()
# fireFoxOptions.set_headless()
# driver = webdriver.Firefox(firefox_options=fireFoxOptions)

# 有界面打开浏览器
driver = webdriver.Firefox()
# 设置10秒页面超时返回，类似于requests.get()的timeout选项，driver.get()没有timeout选项
# 以前遇到过driver.get(url)一直不返回，但也不报错的问题，这时程序会卡住，设置超时选项能解决这个问题。
driver.set_page_load_timeout(10)
# 设置10秒脚本超时时间
driver.set_script_timeout(10)
driver.set_window_size(1366, 768)

# 访问新浪移动端，没有验证码
driver.get('https://passport.weibo.cn/signin/login?entry=mweibo&res=wel&wm=3349&r=http%3A%2F%2Fm.weibo.cn%2F')

WebDriverWait(driver, 30, 1).until(EC.presence_of_element_located((By.XPATH, '//*[@id="loginName"]')))

print(driver.title)

time.sleep(1)

user = driver.find_element_by_xpath('//*[@id="loginName"]')
# 清除当前input元素中的值，需要清除
user.clear()
# 在input元素中输入内容
user.send_keys('51508690@qq.com')

pwd = driver.find_element_by_xpath('//*[@id="loginPassword"]')
pwd.clear()
pwd.send_keys('mumu2018')

login = driver.find_element_by_xpath('//*[@id="loginAction"]')
# 出发这个login元素的click事件
login.click()

WebDriverWait(driver, 30, 1).until(EC.presence_of_element_located((By.XPATH, '//p[@data-node="title"]')))

msg = driver.find_element_by_xpath('/html/body/div[1]/div[1]/div[1]/div[2]/a[2]')
msg.click()

# 需要手动退出driver
driver.quit()

print('over')


四、注意事项
1、需要手动关闭
driver.quit()

2、并发使用多进程

3、html中有iframe
需要切换到iframe中去：driver.switch_to.frame(driver.find_element_by_id("topmenuFrame"))
然后查找iframe下的元素
切换回默认的frame中：driver.switch_to.frame(0)

4、三种等待资源加载完成
4.1、 time.sleep
强制等待，不管资源的实际加载情况，等待指定时长，时间到后直接执行后续代码

4.2、 driver.implicitly_wait(30)
隐性等待，设置一个最长等待时间，如果资源提前加载，则会立即往下执行
注意这个设置为全局设置，对整个driver的所有资源加载都有效，只需要在开始设置一次
弊端：会等待所有资源加载完成
        不靠谱，资源没有显示完也会往下执行

4.3、 显性等待
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
driver.get('https://huilansame.github.io')
locator = (By.LINK_TEXT, 'CSDN')
WebDriverWait(driver, 20, 0.5).until(EC.presence_of_element_located(locator))

5、execute_script ： 执行任意的js脚本

五、phantomjs
官方文档：http://phantomjs.org/api/webpage/

六、安装火狐
1、下载 火狐浏览器，并且安装
2、下载 火狐的驱动geckodriver：https://github.com/mozilla/geckodriver/releases/
3、将第二步下载的火狐驱动，解压得到 geckodriver.exe ， 将这个 exe 放入到 你的python目录下的 Scripts 文件夹中

七、安装chrome
chromedriver版本	支持的Chrome版本
v2.33	v60-62
v2.32	v59-61
v2.31	v58-60
v2.30	v58-60
v2.29	v56-58
v2.28	v55-57
v2.27	v54-56
v2.26	v53-55
v2.25	v53-55
v2.24	v52-54
v2.23	v51-53
v2.22	v49-52
v2.21	v46-50
v2.20	v43-48
v2.19	v43-47
v2.18	v43-46
v2.17	v42-43
v2.13	v42-45
v2.15	v40-43
v2.14	v39-42
v2.13	v38-41
v2.12	v36-40
v2.11	v36-40
v2.10	v33-36
v2.9	v31-34
v2.8	v30-33
v2.7	v30-33
v2.6	v29-32
v2.5	v29-32
v2.4	v29-32

1、自行下载安装chrome
2、在这个页面找对应的chromedriver下载：http://chromedriver.storage.googleapis.com/index.html
3、将这个 chromedriver 放入到对应 的 python目录下的 Scripts 文件夹

疑问：
1、html标签说明：
例子：
<span class="link_postdate">2017年04月01日 19:28:42</span>
span                    :  标签名  tag_name ，  在selenium中，通过 .tag_name  获取
class                   :  属性名 ，class是一个特殊的属性，css通过该class属性查找 ,
                            在selenium中，通过 .get_attribute('class')  获取
link_postdate           :  是属性   class 的值
2017年04月01日 19:28:42 :  文本 ，  在selenium中通过 .text 获取