"""
第一章 python的入门
"""
# 语言：任何人沟通的方式
# 计算机语言：人和计算机沟通的方式
# 利用计算机语言进行编程，让计算机那张人的指令工作。

"""
计算机语言按照级别分为：
机器语言:0,1 代码，高电位，低点位。
汇编语言：通过指令来编写的语言。add 2 3
高级语言：c c++ .net java python php

越低级的语言执行越快
"""
"""
计算机的语言执行方式
编译执行：对于源文件，编译一次，编译成对应的二进制文件
          优点：速度快
          缺点：可移植性差，对于同一的源文件来说，不同的操作系统编译出来的二进制文件不同
          例子：c c++

解释执行：对于源文件，使用解释器对代码进行逐行解释，不会编译形成二进制文件
          优点：可移植性好
          缺点：执行速度慢
          例子：python，JavaScript
"""
# java:既是解释性的语言，也是编译性的语言。
# 因为java的源文件会编译成字节码文件（不是二进制文件），java本身也有解释器lvm
# jvm是对字节码文件进行编译和解析
# 执行速度不慢，可移植性又比较好

# 一、python的发展史
# python是荷兰的，龟叔的人，曾设计ABC语言，失败，原因不开源
# 1989年圣诞节，决心开发一门新的语言python 特点:开源

# 二、python的版本
#python2版本  2.7之后不再维护
#python3版本  目前已经到了3.7，讲课使用的是3.6

# 三、python的特点
# 1.语法简洁
# 2.既能面向对象，也能面向过程
# 3.是解释型语言，具有很好的跨平台性（可移植性）
# 4.有扩展性
# 5.有强大的丰富的资源库

# 缺点：执行速度慢，解释性语言本身就慢（进行二次编译）
#       代码不能加密

# 四、python应用领域
"""
1、web应用开发，djanle，豆瓣，youtube
2、网络爬虫
3、数据分析，科学计算，人工智能
4、游戏编程 pygame
"""

# 五、python的开发环境
"""
1.安装python 3.6版本
注意：勾选 add path，安装路径明确（不使用默认安装）

2.安装pycharm：属于开发工具
注意：安装路径（最好不要用默认安装）
      配置python解释器 file-setting-project interpreter
      
"""
# 3.hello world
"""
两种方式：
（1）在命令行执行python，交互式执行
（2）在命令行使用python，使用脚本（.py）执行

区别：交互式执行相当于一行一行执行注入代码
      脚本式执行相当于一次执行py文件中所有源码
"""
#目前我们开发或者学习过程中使用的是pycharm开发工具

#六、变量和常量
#1、变量
#定义：用指定的名称绑定特定的值
#了解:不同的语言对于变量的赋值意义是不同的。
#python中的变量赋值：相当于给变量值起名字（类似于给变量值起名字）
#java中的变量赋值：真正使用变量名为内存，变量值就存在变量名的内存里
#python中变量定义的格式：变量=变量值
a="hello world"

print("hello world")

#2.常量
#多个变量指向同一个内存地址
#在python中，是基于值的内存管理，所以对于（数值、字符串、字节，布尔)都是使用单个内存地址
# 对于这些数据类型，只存储一份
a='hello world'
b='hello world'

#对已经存在的变量进行重新赋值
#修改变量的绑定
# 同一个变量名不能绑定多个变量值
# 对于同一变量值来说，可以使用多个变量名绑定
#Python的变量可以绑定任何类型的数据。
a='python'
print(a)

"""
动态语言和静态语言
"""
# 动态语言:给变量赋值不固定的，称为动态语言
# 静态语言：一旦给变量进行了某种类型的赋值或者绑定之后，不可以绑定其他类型的数据

"""
强类型语言和弱类型语言
"""
# 强类型语言：（强制数据类型），一旦一个变量被指定了某一个数据类型，如果不经历强制转换，
            # 则没有办法改成其他类型
            #python是强类型语言
# 弱类型语言：一旦一个变量被定义成一个数据类型，不需要强制转换
# $n=1
# $n="new"
# php弱类型语言

#python变量赋值时候的简便使用
# （1）同时为多个变量赋值
x=y=z=3
print(x,y,z)

# （2）平行赋值
x,y,z=1,2,3
print(x,y,z)

# 应用：数据交换
a=4
b=10
a,b=b,a
# print(a,b)

# temp=a
# a=b
# b=temp

#变量的删除：
#语法：del 变量名
a=5
print(a)
del a

p=None



#2.常量
#常量也是一种变量，只不过是比较特殊
# （1）普通常量：常量的名字全部使用大写
# 作用：相当于标识当前的变量值不能改
#python程序的程序靠自觉性
PI=3.14159

#（2）None 特殊常量，是python内置的常量值，表示值的缺失

# 结尾字符，print 默认的结尾字符是\n换行
# 可以使用 end关键字修改
print(1,2,3,end="")
print("hello world")

# 分割字符的设置,print中多个元素使用的连接字符
#连接字符默认是空格，可以使用sep=""进行修改
print(1,2,3,sep="")

#2.输入：执行input的时候，程序会阻塞，等待用户输入
# input("提示信息：")提示信息

#小游戏，猜数字
# realvalue=10
# guess=input("请输入你猜的数字是什么：")
# if realvalue==int(guess):
#     print("猜对了！")
#     print("中午请你吃饭~")
# else:
#     print("猜错了！")
#     print("你真是个小笨蛋")

#2.特殊注释
#（1）标注python解释器的位置
#在windows上一般不需要
#在linux，unix下需要标注python解释器的位置
#！/usr/bin/python35（linux下必须有）
#（2）设置文件的编码
#-*-coding：utf-8-*-（python2下需标出）
#puthon2 默认的编码机是ascii；所以在Python2的py文件中必须要注明文件的编码集，否则中文就会乱码
#python3默认的编码集是utf-8 所以在python3的py文件中不需要特殊标注

#python是不会忽略特殊注释的

#九、标识符
#标识符：作为类，函数，变量等名字的符号
#标识符：
"""
(1)字数，数字，下划线组成，不能用数字开头
（2）不能干关键字重名
（3）标识符是区分大小写的
（4）python4中标识符的字符集习惯上按照unicode字符集，但是@、$、*一般不采用作为标识符
"""

#十、关键字
#有特殊语义的符号，在python中与生俱来的符号
# import keyword
# print(keyword.kwlist)

"""
第二章 数据类型--数值类型，布尔类型
python 的基础数据类型
数值类型：整数类型，浮点类型，复数类型
布尔类型：是数值类型的子类型
序列类型：字符串，字节，列表，元组
映射类型：字典
集合类型：集合
自定义类创建对象

"""

# 一、数值类型
# 1、整数类型（int） 3，5,0
#（1）定义:变量名=变量值（整数）
#type能够返回object对象所属的类
a=2
print(type(a))

# (2)取值范围（整数的取值安慰可以看成是无限）
# i=10**100
# print(i)i
#python3，可以支持所有整数，当数字的范围超过32位的时候自动升级，
#python2，分为两种，int（32）（超过32报错） long（64）

#（3）四种进制
#N进制，逢N进制

"""
二进制
八进制
十进制
十六进制
"""
"""
十进制  二进制  八进制
0       0       0
1       1       1
2       10
3       11
4       100
5       101
6       110
7       111     7
8       1000    10
"""

#二进制， 定义需要使用0b或者0B作为前缀
x=0b101110

#八进制，定义需要0o或者0O作为前缀
y=0o1234567

#print方法没有指定进制，默认打印十进制

#十六进制，0x或者0X作为前缀 11-15a/A-f/F
z=0x123456789ABCDEF
print(x,y,z)

#进制之间的转换
#不适用函数（手工）
#q其他禁止转成十进制
#十进制转成其他进制
# 1234=1*1000+2*100+3*10+4*1
# 1234=1*10**3+2*10**2+3*10**1+4*10**0
# 1010=1*2**3+0*2**2+1*2**1+0*2**0=10
# 底数：原来的进制
# 指数：从右向左，当前的位置（右侧第一位是从0开始）

# 十进制用下除法，下除取余
# 除数：要转换成进制
# 取得结果:从下往上

#二进制和八进制:每一位八进制，都是用3位的二进制标识即可
# a=0o12    1*8**1=2=10
# b=0b001010
# print(a,b)

#二进制和十六进制之间：每一位的十六进制都使用4位二进制表示
# a=0x12    1*16**1=2=18
# b=0b00010010

#--------------------
# 进制转换 使用函数
# int（x）：转换成十进制
# oct（x）：转换成八进制
# bin（x）：转换成二进制
# hex（x）：转换成十六进制

#二进制，八进制，十六进制对应的返回值都是字符串

# 2.布尔类型
#布尔类型只有两个值 true false（注意大小写）
#布尔类型是整数类型的子类型
# true---1 false---0
#定义 ：变量名=变量值

#数值，字符串，字节，布尔类型，只在内存中存储一分

#3.浮点类型
# 数学中的小数0.1  0.2

# （2）科学计数法
print(1.2e8)
print(1.2e-8)

#（3）取值范围
#浮点类型是有界限
#sys模块中浮点数的最大值和最小值
f=1e1000
print(f)

import sys
print(sys.float_info.max)
print(sys.float_info.min)

#(4)特殊的浮点数
#nan：not a number,用来表示无效数字（当数学上没有意义的数字）
#nan跟谁都不相等，跟自己也不相等
# inf：无穷大和无穷小（超过了浮点数的解限之后，只能使用info来标识）

# print(float("nan"))
# a=float("inf")
# print(a)

#判断一个数是不是nan，只能用math下的isnan（）判断
import math
# math.isnan()

#浮点的不精确性
#浮点数在计算机中只能做到近似存储
#为什么 不精确（有一部分小数是精确的）

# 小数转传承二进制的方式：*进制 取整数
# 0.1-----------二进制码
"""
0.1*2=0.2  取整等于0
0.4*2=0.8  取整等于0
0.8*2=1.6  取整等于1
0.6*2=1.2  取整等于1
0.2*2=0.4  取整等于1
"""

"""
0.5*2=1.0  取整等于1
"""

"""
使用浮点数要注意：
（1）尽量避免数量级相差很大的浮点值之间进行计算
（2）尽量避免等值判断
  因为浮点数本来就不精确
"""

#解决浮点数的不精确性
import decimal
decimal.Decimal #能够显示浮点数的真正存储值
x1=decimal.Decimal("0.1")
x2=decimal.Decimal("0.2")
print(x1+x2==0.3)   #false

# 改变浮点数的有效数字，默认的有效数字是28
print(decimal.getcontext().prec)
decimal.getcontext().prec=5
#注意，只有做运算之后，运算结果会对有效数字生效，xy值本身不变

# 4.复数类型
import cmath
print(cmath.sqrt(-1))

#虚部使用j来表示
c=3-5j
print(type(c))
print(c.real)
print(c.imag)

#四种类型之间的转换
# 整数 浮点数  复数 布尔
# int(value):可以将value转换成整数类型（取整直接去掉小数点，相当于向零取整）
# int函数不能将复数类型转换成整形
#float（value）：可以将value转成浮点数 后加.0
                    # 不写value，默认返回0.0

#complex（value）:可以将value转成复数类型
                    #不写value 返回值是0j

b=True
print(complex(b))

#bool(value):可以将value转成布尔类型
            # 当0,0.0,0j 转换成false，否则转成true

#布尔类型，可以将所有的数据类型进行转换


#各种数据类型进行运算
# 结果取高级别类型
#复数类型>float>整数类型  布尔类型 不参与运算

